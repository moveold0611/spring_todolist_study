{"ast":null,"code":"var _jsxFileName = \"C:\\\\aws\\\\spring_todolist\\\\front\\\\todolist\\\\src\\\\auth\\\\AuthRoute.jsx\",\n  _s = $RefreshSig$();\nimport { Navigate, useLocation, useNavigate } from 'react-router-dom';\nimport { useQuery } from 'react-query';\nimport { useEffect, useState } from 'react';\nimport { tokenCheck } from '../apis/api/account';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthRoute({\n  element\n}) {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const pathname = location.pathname;\n  const permitAllPath = [\"/auth\"];\n  const [elementState, setElementState] = useState( /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));\n  useEffect(() => {\n    tokenCheck().then(response => {\n      for (let path of permitAllPath) {\n        if (pathname.startsWith(path)) {}\n      }\n      setElementState(element);\n    }).catch(error => {\n      for (let path of permitAllPath) {\n        if (pathname.startsWith(path)) {\n          return /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 28\n          }, this);\n        }\n      }\n    });\n  }, []);\n\n  //     window.location.replace(\"/\"); 새로고침\n\n  // const authenticateState\n  //     = useQuery([\"authenticate\"], authenticate, {\n  //         retry: 0,\n  //         refetchOnWindowFocus: false\n  //     }); // useQuery는 모두 get요청\n\n  // if(authenticateState.isError) {\n  //     for(let path of permitAllPath) {\n  //         if(pathname.startsWith(path)) {\n  //             return element;\n  //         }\n  //     }\n  //     return <Navigate to={\"/\"}/>\n  // }\n\n  // for(let path of permitAllPath) {\n  //     if(pathname.startsWith(path)) {\n  //         return <Navigate to={\"/\"}/>\n  //     }\n  // }\n\n  return elementState;\n}\n_s(AuthRoute, \"sZpIpXTWtxATzJmwfG5iMG/S5tA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AuthRoute;\nexport default AuthRoute;\nvar _c;\n$RefreshReg$(_c, \"AuthRoute\");","map":{"version":3,"names":["Navigate","useLocation","useNavigate","useQuery","useEffect","useState","tokenCheck","Fragment","_Fragment","jsxDEV","_jsxDEV","AuthRoute","element","_s","navigate","location","pathname","permitAllPath","elementState","setElementState","then","response","path","startsWith","catch","error","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/aws/spring_todolist/front/todolist/src/auth/AuthRoute.jsx"],"sourcesContent":["import { Navigate, useLocation, useNavigate } from 'react-router-dom';\r\nimport { useQuery } from 'react-query';\r\nimport { useEffect, useState } from 'react';\r\nimport { tokenCheck } from '../apis/api/account';\r\n\r\nfunction AuthRoute({ element }) {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const pathname = location.pathname;\r\n    const permitAllPath = [\"/auth\"];\r\n    const [ elementState, setElementState ] = useState(<></>);\r\n  \r\n    useEffect(() => {\r\n        tokenCheck()\r\n        .then((response) => {\r\n\r\n            for(let path of permitAllPath) {\r\n                if(pathname.startsWith(path)) {\r\n                    \r\n                }\r\n            }\r\n            setElementState(element)\r\n        }).catch((error) => {\r\n            for(let path of permitAllPath) {\r\n                if(pathname.startsWith(path)) {\r\n                    return <Navigate to={\"/\"}/>\r\n                }\r\n            }\r\n        });\r\n    },[])\r\n    \r\n    //     window.location.replace(\"/\"); 새로고침\r\n\r\n    // const authenticateState\r\n    //     = useQuery([\"authenticate\"], authenticate, {\r\n    //         retry: 0,\r\n    //         refetchOnWindowFocus: false\r\n    //     }); // useQuery는 모두 get요청\r\n\r\n\r\n    // if(authenticateState.isError) {\r\n    //     for(let path of permitAllPath) {\r\n    //         if(pathname.startsWith(path)) {\r\n    //             return element;\r\n    //         }\r\n    //     }\r\n    //     return <Navigate to={\"/\"}/>\r\n    // }\r\n\r\n    // for(let path of permitAllPath) {\r\n    //     if(pathname.startsWith(path)) {\r\n    //         return <Navigate to={\"/\"}/>\r\n    //     }\r\n    // }\r\n\r\n    \r\n    return elementState;\r\n}\r\n\r\nexport default AuthRoute;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AACrE,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,qBAAqB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,SAASA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAMe,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;EAClC,MAAMC,aAAa,GAAG,CAAC,OAAO,CAAC;EAC/B,MAAM,CAAEC,YAAY,EAAEC,eAAe,CAAE,GAAGd,QAAQ,eAACK,OAAA,CAAAF,SAAA,mBAAI,CAAC,CAAC;EAEzDJ,SAAS,CAAC,MAAM;IACZE,UAAU,CAAC,CAAC,CACXc,IAAI,CAAEC,QAAQ,IAAK;MAEhB,KAAI,IAAIC,IAAI,IAAIL,aAAa,EAAE;QAC3B,IAAGD,QAAQ,CAACO,UAAU,CAACD,IAAI,CAAC,EAAE,CAE9B;MACJ;MACAH,eAAe,CAACP,OAAO,CAAC;IAC5B,CAAC,CAAC,CAACY,KAAK,CAAEC,KAAK,IAAK;MAChB,KAAI,IAAIH,IAAI,IAAIL,aAAa,EAAE;QAC3B,IAAGD,QAAQ,CAACO,UAAU,CAACD,IAAI,CAAC,EAAE;UAC1B,oBAAOZ,OAAA,CAACV,QAAQ;YAAC0B,EAAE,EAAE;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC;QAC/B;MACJ;IACJ,CAAC,CAAC;EACN,CAAC,EAAC,EAAE,CAAC;;EAEL;;EAEA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAGA,OAAOZ,YAAY;AACvB;AAACL,EAAA,CApDQF,SAAS;EAAA,QACGT,WAAW,EACXD,WAAW;AAAA;AAAA8B,EAAA,GAFvBpB,SAAS;AAsDlB,eAAeA,SAAS;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}