{"ast":null,"code":"var _jsxFileName = \"C:\\\\aws\\\\spring_todolist\\\\front\\\\todolist\\\\src\\\\auth\\\\AuthRoute.jsx\",\n  _s = $RefreshSig$();\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { authenticate } from '../apis/api/account';\nimport { useQuery } from 'react-query';\nimport Loading from '../components/Loading/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthRoute({\n  element\n}) {\n  _s();\n  const location = useLocation();\n  const pathname = location.pathname;\n  const permitAllPath = [\"/account\"];\n  //     window.location.replace(\"/\"); 새로고침\n\n  const authenticateState = useQuery([\"authenticate\"], authenticate, {\n    retry: 0,\n    refetchOnWindowFocus: false\n  }); // useQuery는 모두 get요청\n\n  if (authenticateState.isError) {\n    for (let path of permitAllPath) {\n      if (pathname.startsWith(path)) {\n        return element;\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/account/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n  for (let path of permitAllPath) {\n    if (pathname.startsWith(path)) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 20\n      }, this);\n    }\n  }\n  return element;\n}\n_s(AuthRoute, \"YTv+VRWrhO1IcCZh6zvQT0Nd9pI=\", false, function () {\n  return [useLocation, useQuery];\n});\n_c = AuthRoute;\nvar _c;\n$RefreshReg$(_c, \"AuthRoute\");","map":{"version":3,"names":["Navigate","useLocation","authenticate","useQuery","Loading","jsxDEV","_jsxDEV","AuthRoute","element","_s","location","pathname","permitAllPath","authenticateState","retry","refetchOnWindowFocus","isError","path","startsWith","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/aws/spring_todolist/front/todolist/src/auth/AuthRoute.jsx"],"sourcesContent":["import { Navigate, useLocation } from 'react-router-dom';\r\nimport { authenticate } from '../apis/api/account';\r\nimport { useQuery } from 'react-query';\r\nimport Loading from '../components/Loading/Loading';\r\n\r\nfunction AuthRoute({ element }) {\r\n    const location = useLocation();\r\n    const pathname = location.pathname;\r\n    const permitAllPath = [\"/account\"];\r\n    //     window.location.replace(\"/\"); 새로고침\r\n\r\n    const authenticateState\r\n        = useQuery([\"authenticate\"], authenticate, {\r\n            retry: 0,\r\n            refetchOnWindowFocus: false\r\n        }); // useQuery는 모두 get요청\r\n\r\n\r\n\r\n    if(authenticateState.isError) {\r\n        for(let path of permitAllPath) {\r\n            if(pathname.startsWith(path)) {\r\n                return element;\r\n            }\r\n        }\r\n        return <Navigate to={\"/account/login\"}/>\r\n    }\r\n\r\n    for(let path of permitAllPath) {\r\n        if(pathname.startsWith(path)) {\r\n            return <Navigate to={\"/\"}/>\r\n        }\r\n    }\r\n\r\n    \r\n    return element;\r\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,OAAO,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,SAASC,SAASA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;EAClC,MAAMC,aAAa,GAAG,CAAC,UAAU,CAAC;EAClC;;EAEA,MAAMC,iBAAiB,GACjBV,QAAQ,CAAC,CAAC,cAAc,CAAC,EAAED,YAAY,EAAE;IACvCY,KAAK,EAAE,CAAC;IACRC,oBAAoB,EAAE;EAC1B,CAAC,CAAC,CAAC,CAAC;;EAIR,IAAGF,iBAAiB,CAACG,OAAO,EAAE;IAC1B,KAAI,IAAIC,IAAI,IAAIL,aAAa,EAAE;MAC3B,IAAGD,QAAQ,CAACO,UAAU,CAACD,IAAI,CAAC,EAAE;QAC1B,OAAOT,OAAO;MAClB;IACJ;IACA,oBAAOF,OAAA,CAACN,QAAQ;MAACmB,EAAE,EAAE;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAC5C;EAEA,KAAI,IAAIN,IAAI,IAAIL,aAAa,EAAE;IAC3B,IAAGD,QAAQ,CAACO,UAAU,CAACD,IAAI,CAAC,EAAE;MAC1B,oBAAOX,OAAA,CAACN,QAAQ;QAACmB,EAAE,EAAE;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAC/B;EACJ;EAGA,OAAOf,OAAO;AAClB;AAACC,EAAA,CA/BQF,SAAS;EAAA,QACGN,WAAW,EAMtBE,QAAQ;AAAA;AAAAqB,EAAA,GAPTjB,SAAS;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}